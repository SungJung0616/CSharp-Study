#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

interface와 deligate 이해하기

#!markdown

interface를 왜 사용하면 좋은지

인터페이스 타입 변수로 여러 가지 다른 객체를 참조할 수 있습니다.
서로 다른 클래스들이 동일한 인터페이스를 구현하면, 하나의 타입으로 처리할 수 있습니다.

클래스를 변경하지 않고도 새로운 기능을 쉽게 추가할 수 있습니다.

코드의 확장성과 일관성을 높여주는 중요한 설계 도구입니다.

#!markdown

interface는 해당 interface를 구현한 class 나 구조체에만 참조가능

#!csharp

public interface IMovable
{
    void move();
}

public class Car : IMovable
{
    public void move()
    {
        Console.WriteLine($"The car is moving");
    }
}

IMovable movable = new Car();
movable.move();

public class Bike : IMovable
{
    public void move()
    {
        Console.WriteLine($"The Bike is moving");
    }
}

IMovable movable2 = new Bike();
movable2.move();

#!markdown

궁금한점, 왜 car class에 move함수가 있고 interface에 있나?
1. interface 에는 선언만 가능하고 구현할수없다.
2. IMovable 을 구현하기위해서 Car class 를 이용.
3. IMovalbe 타입변수를 Car 객체를 참조함으로써, IMovalbe 를 구현체로 교교체할수있는 유연성을 제공

결국 interface는 역할 분리를 위해서 사용됨. interface를 통해 "어떤 행동을 해야하는지" 정의하고, "어떻게 행동할지는" 클래스에서 개별적으로 구현.
같은 interface 를 구현한 여러 클래스가 있으면, 코드에서 interface 타입을 통해 통합적으로 다룰수 있음.

#!csharp

public class Animal
{
    public void Speak() => Console.WriteLine("Animal speaks");
}

public class Dog : Animal
{
    public void Bark() => Console.WriteLine("Dog barks");
}

Animal animal = new Dog();
Dog dog = new Animal();
animal.Speak();
animal.Bark();

dog.Bark();
dog.Speak();
 

#!markdown

예제를 하다고 또 헷갈리는 부분이 있어 정리함. 
부모 타입 변수는 자식 클래스 객체를 참조 할수 있지만, 부모 클래스 정의된 멤버만 사용가능.
자식 타입 변수는 부모객체를 참조할수 없다. 

#!csharp

public interface IDataService
{
    void GetData();
}

public class SqlDataService : IDataService 
{
    public void GetData() => Console.WriteLine("Fetching data from SQL");
}

public class App 
{
    private readonly IDataService _dataService;
    public App (IDataService dataService)
    {
        _dataService = dataService;
    }

    public void Run()
    {
        _dataService.GetData();
    }
}

IDataService dataservice =  new SqlDataService();
App app = new App(dataservice);
app.Run();

#!markdown

interface를 확용한 문제

#!csharp

public interface IAnimal
{
    void Speak();
    void Eat();
}

public class Dog : IAnimal
{
    public void Speak() => Console.WriteLine("Woof");
    public void Eat() => Console.WriteLine("The dog is easting");
}

public class Cat : IAnimal
{
    public void Speak() => Console.WriteLine("Meow");
    public void Eat() => Console.WriteLine("The cat is easting");
} 

IAnimal[] animals = {new Dog(), new Cat()};

foreach ( IAnimal animal in animals)
{
    animal.Speak();
    animal.Eat();
}

#!markdown

코드개선점. 변수를 배열로 관리후 반복문으로 출력력

#!csharp

public interface IVehicle
{
    void StartEngine();
    void StopEngine();
}

public class Car : IVehicle
{
    public void StartEngine() => Console.WriteLine("The car engine is starting");
    public void StopEngine() => Console.WriteLine("The car engine is stopping");
}

public class Motocycle : IVehicle
{
    public void StartEngine() => Console.WriteLine("The motocycle engine is starting");
    public void StopEngine() => Console.WriteLine("The motocycle engine is stopping");
}

IVehicle[] vehicles = {new Car(), new Motocycle()};

foreach ( IVehicle vehicle in vehicles)
{
    vehicle.StartEngine();
    vehicle.StopEngine();
}

#!markdown

화 문제 (보너스)
문제: IPotion 인터페이스에 새로운 메서드를 추가하여 포션의 이름을 반환하도록 하고, 사용자가 어떤 포션을 사용했는지 출력하세요.
🔧 힌트:
string GetPotionName(); 메서드를 IPotion에 추가하세요.
각 포션 클래스에서 이름을 반환하도록 구현하세요.
반복문을 통해 포션 이름과 사용 메시지를 출력하세요.

#!csharp

public interface IPotion
{
    void Use();
    string GetPotionName();
    int GetEffectAmount();
}

public class HealthPotion : IPotion
{
    public void Use() => Console.WriteLine($"You have restored {GetEffectAmount()} health!");
    public string GetPotionName() => "Health Potion";
    public int GetEffectAmount() => 50;
}

public class ManaPotion : IPotion
{
    public void Use() => Console.WriteLine($"You have restored {GetEffectAmount()} mana!");
    public string GetPotionName() => "Mana Potion";
    public int GetEffectAmount() => 30;
}

List<IPotion> potions = new List<IPotion>
{
    new HealthPotion(),
    new ManaPotion()
};

foreach (IPotion potion in potions)
{
    potion.Use();
    Console.WriteLine($"Potion Used: {potion.GetPotionName()}");
   }

#!markdown

IPotion을 리스트로 관리를 한 이유는?
**List<IPotion>**는 여러 다양한 포션 타입(HealthPotion, ManaPotion)을 **하나의 컬렉션(List)**으로 관리할 수 있도록 해줍니다.
리스트에 인터페이스 타입을 사용하면, 인터페이스를 구현한 모든 클래스의 객체를 리스트에 추가할 수 있습니다.
객체 수가 동적으로 변경될 가능성이 있기 때문에. 

#!markdown

**배열 vs 리스트**
객체수가 고정적이고 변경되지 않을때 배열, 객체수가 동적으로 변경되거나 데이터 추가/삭제가 비번할때는 리스트사용.
